"""
Django settings for djangoProject project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import sys
from pathlib import Path
from datetime import timedelta
import configparser


# 允许最大 5MB 的
DATA_UPLOAD_MAX_MEMORY_SIZE = 3 * 1024 * 1024  # 3MB (5 * 1024 * 1024 = 5242880)

# 单个文件的最大大小
FILE_UPLOAD_MAX_MEMORY_SIZE = 3 * 1024 * 1024  # 3MB

# 限制 POST 请求的字段数量
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

MEDIA_URL = '/media/'
AUTH_USER_MODEL = 'user.SysUser'  # 修改 user 应用的 SysUser 模型

# Build paths 
BASE_DIR = Path(__file__).resolve().parent.parent

# 添加项目根目录到Python路径
sys.path.insert(0, str(BASE_DIR))

MEDIA_ROOT = os.path.join(BASE_DIR, "media")


DASHSCOPE_API_KEY = "sd"


DASHSCOPE_URL = "https://dashscope.aliyuncs.com/compatible-mode/v1"

# settings.py
GEMINI_CONFIG = {
    'API_KEY': 'Ac',
    'DEFAULT_MODEL': 'models/gemini-2.0-flash-exp',
    'ALLOWED_MODELS': [
        'models/gemini-1.5-flash',
        'models/gemini-1.5-pro'
    ]
}

# settings.py

# 百度翻译API配置
BAIDU_TRANSLATE_CONFIG = {
    'APPID': '26',  # 你的百度翻译APPID
    'APPKEY': 'qx',  # 你的百度翻译APPKEY
    'FROM_LANG': 'auto',  # 默认源语言
    'TO_LANG': 'en',  # 默认目标语言
    'ENDPOINT': 'http://api.fanyi.baidu.com',
    'PATH': '/api/trans/vip/translate',
}

# ChatGPT配置
CHATGPT_CONFIG = {
    'API_KEY': 'sS',
    'API_URL': 'https:/hat/completions',
    'MODEL': 'gpt-4o-image',
    'ALLOWED_MODELS': [
        'gpt-4o-all',
        'gpt-4o-image-vip'
    ],  # 默认模型
    'DEFAULT_SIZE': '1024x1024'
}

# 你的openai-key#
CHATGPT_CONFIG_OPENAI = {
    'API_KEY': 'sS',
    'API_URL': 'https://m/v1',
    'MODEL': 'gpt-image-1',
    'ALLOWED_MODELS': [
        'gpt-4o-all',
        'gpt-4o-image-vip'
    ],  # 默认模型
    'DEFAULT_SIZE': '1024x1024'
,
    'points': 20
}

CHATGPT_CONFIG_NEW_01 = {
    'API_KEY': 'sF',
    'API_URL': 'https://api.gpcompletions',
    'MODEL': 'gpt-4o-image',
    'ALLOWED_MODELS': [
        'gpt-4o-all',
        'gpt-4o-image-vip'
    ],  # 默认模型
    'DEFAULT_SIZE': '1024x1024'
}

CHATGPT_CONFIG_NEW = {
    'API_KEY': 'ss',
    'API_URL': 'https://api.juheai.top/v1/chat/completions',
    'MODEL': 'gpt-4o-image',
    'ALLOWED_MODELS': [
        'gpt-4o-all',
        'gpt-4o-image-vip'
    ],  # 默认模型
    'DEFAULT_SIZE': '1024x1024'
}

CHATGPT_API_KEY_NEW = CHATGPT_CONFIG_NEW['API_KEY']
CHATGPT_API_URL_NEW = CHATGPT_CONFIG_NEW['API_URL']

CHATGPT_API_KEY = CHATGPT_CONFIG['API_KEY']
CHATGPT_API_URL = CHATGPT_CONFIG['API_URL']

FASTAPI_URL = "http://45.78.202.67:9152"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'dg!i@!n4ie+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '192.168.1.16',
    '192.168.1.32',
    '0.0.0.0',
    
]


# Application definition 注册应用

INSTALLED_APPS = [
    "corsheaders",
    'template',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 第三方应用
    'rest_framework',
    'rest_framework_jwt',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'drf_spectacular',
    'user',
    'order',
    'templateImage',
    'templateVideo',
    'rest_framework_simplejwt.token_blacklist',
    'db'
]
# 更改默认语言为中文
LANGUAGE_CODE = 'zh-hans'

 # 更改时区为上海
TIME_ZONE = 'Asia/Shanghai'
# 隐藏右侧SimpleUI广告链接和使用分析
# SIMPLEUI_HOME_INFO = False
# SIMPLEUI_ANALYSIS = False
#  # 换成自己Logo链接
# SIMPLEUI_LOGO = '/media/images/logo.png'


# F:\project\mjapplication_server\static\images\logo.png
# 配置 DRF
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'exception.exception_handler.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # 使用 JWT 认证
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]

}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),  # Token 过期时间为 7 天
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),  # 刷新 Token 过期时间为 14 天
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=7),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=14),
}

# 配置 drf-spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': 'MoJieApplicationService API',
    'DESCRIPTION': 'AIGC服务端',
    'VERSION': '0.0.1',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.middleware.DatabaseConnectionMiddleware',  # 添加数据库连接管理中间件
]
SESSION_COOKIE_AGE = 86400
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
ROOT_URLCONF = 'djangoProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoProject.wsgi.application'

# CORS_ORIGIN_ALLOW_ALL为True, 指定所有域名(ip)都可以访问后端接口, 默认为False
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",  # 替换为你的 Vue 前端地址
    "http://127.0.0.1:8000",  # 替换为你的 Vue 前端地址
]
# CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173",
#     "http://127.0.0.1:5173",  # 替换为你的 Vue 前端地址
# ]
CORS_ALLOW_METHODS = [
 'GET',
 'POST',
 'PUT',
 'PATCH',
 'DELETE',
 ]


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# 数据库配置 msql:8.0.41 默认账号：root 密钥：mojie0303 IP/端口：127.0.0.1:3306

# 读取配置文件
config = configparser.ConfigParser()
config.read('config/config.ini')


# SQLAlchemy 连接池配置
SQLALCHEMY_DATABASE_URL = f"mysql+mysqldb://{config.get('mysql', 'user')}:{config.get('mysql', 'password')}@{config.get('mysql', 'host')}:{config.get('mysql', 'port')}/{config.get('mysql', 'name')}?charset=utf8mb4"

# SQLAlchemy 连接池设置
SQLALCHEMY_POOL_SETTINGS = {
    'pool_size': 60,          # 连接池大小
    'max_overflow': 10,      # 超出池大小后可额外创建的连接数
    'pool_recycle': 3600,    # 连接最大复用时间（秒）
    'pool_pre_ping': True,   # 检查连接可用性
    'pool_timeout': 30,      # 连接超时时间（秒）
    'echo': False,           # 是否打印 SQL 语句
}

# Redis 缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": config.get('redis', 'locate'),  # Redis 服务器地址和端口，这里假设 Redis 运行在本地 6379 端口，使用数据库 1
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


#数据库配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config.get('mysql', 'name'),
        'USER': config.get('mysql', 'user'),
        'PASSWORD': config.get('mysql', 'password'),
        'HOST': config.get('mysql', 'host'),
        'PORT': config.get('mysql', 'port'),
        'CONN_MAX_AGE': 30,  # 连接保持时间1分钟
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
            'connect_timeout': 30,
            'read_timeout': 30,
            'write_timeout': 30,
        },
        'ATOMIC_REQUESTS': True,
        'CONN_HEALTH_CHECKS': True,
    }
}

# 连接池监控配置
DJANGO_MYSQL_POOL_MONITOR = True  # 启用连接池监控
DJANGO_MYSQL_POOL_MONITOR_INTERVAL = 60  # 监控间隔（秒）
DJANGO_MYSQL_POOL_MONITOR_MAX_AGE = 3600  # 连接最大存活时间（秒）
DJANGO_MYSQL_POOL_MONITOR_MAX_USES = 1000  # 连接最大使用次数

# settings.py

# ComfyUI 配置
# COMFYUI_SERVER_ADDRESS = '127.0.0.1:8188'
COMFYUI_SERVER_ADDRESS = '127.0.0.1:1004'
# COMFYUI_SERVER_ADDRESS = '118.145.137.40:8188'
# COMFYUI_TEXT_IMAGE_WORKFLOW = '/path/to/text_to_image_workflow.json'
# COMFYUI_IMAGE_IMAGE_WORKFLOW = '/path/to/image_to_image_workflow.json'
# Redis 配置
REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6379

WHITE_SERVER_ADDRESS = "http://127.0.0.1:8000/segment"

FLUX_KONEXT_PRO_API_KEY = "38"
FLUX_KONEXT_PRO_URL = "https://api.bfl.ai/v1/flux-kontext-pro"
FLUX_KONEXT_POINTS = 3


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 静态文件收集目录
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# 建议将成功URL放在配置中
CUSTOM_SUCCESS_URL = "https://124.71.14.254:5433/payment/success"

# 使用reverse构建本地URL
return_url = f"http://124.71.14.254:9152/alipay/return/"

# 2021005145684663
# settings.py 配置
ALIPAY_CONFIG = {
    # 'appid': '2021005155606549', 2021000147659214
    'appid': '29',
    'app_notify_url': 'https://www.qihuaimage.com/api/payments/notification/alipay/',
    # 'app_notify_url': 'http://192.168.1.16:9500/api/pay/payments/notification/alipay/',
    'app_private_key_path': os.path.join(BASE_DIR, 'alipayOnly/app_private_key.pem'),
    'alipay_public_key_path': os.path.join(BASE_DIR, 'alipayOnly/alipay_public_key.pem'),
    'sign_type': 'RSA2',
    'debug': False,
    # 'gateway_url': 'https://openapi-sandbox.dl.alipaydev.com/gateway.do',  # 沙箱环境网关
    'gateway_url': 'https://openapi.alipay.com/gateway.do',
    'return_url': 'https://www.qihuaimage.com/api/pay/alipay/return/'
    # 'return_url': 'http://192.168.1.16:9500/api/pay/alipay/return/'
}


# settings.py 示例配置
PAYMENT_FAILED_URL = 'https://124.71.14.254:5433/payment/fail?reason=sign_error'
PAYMENT_PENDING_URL = 'https://124.71.14.254:5433/payment/waiting'

# 建议记录验证日志
import logging
logger = logging.getLogger('alipay')

# SIMPLEUI_CONFIG = {
#     # 是否使用系统默认菜单，自定义菜单时建议关闭。
#     'system_keep': False,

#     # 用于菜单排序和过滤, 不填此字段为默认排序和全部显示。空列表[] 为全部不显示.
#     # 'menu_display': ['漏洞信息管理','图片管理', '视频管理','权限认证'],

#     # 设置是否开启动态菜单, 默认为False. 如果开启, 则会在每次用户登陆时刷新展示菜单内容。
#     # 一般建议关闭。
#     'dynamic': False,
#     'menus': [
#         {
#          'app': 'auth',
#             'name': '权限认证',
#             'icon': 'fas fa-user-shield',
#             'models': [
#                 {
#                     'name': '管理用户列表',
#                     'icon': 'fa fa-user-secret',
#                     'url': 'auth/user/'
#                 },
#                 {
#                     'name': '用户组',
#                     'icon': 'fa fa-th-list',
#                     'url': 'auth/group/'
#                 }
#             ]
#         },
#         {
#             'app': 'templateImage',
#             'name': '图片管理',
#             'icon': 'fa fa-th-list',
#             'models': [
#                 {
#                     'name': '图片生成管理',
#                     'icon': 'fa fa-th-list',
#                     'url': '/admin/templateImage/templateimage/'
#                 }
#             ]
#         },
#         {
#             'app': 'templateVideo',
#             'name': '视频管理',
#             'icon': 'fa fa-th-list',
#             'models': [
#                 {
#                     'name': '视频生成管理',
#                     'icon': 'fa fa-th-list',
#                     'url': '/admin/templateVideo/templatevideo/'
#                 }
#             ]
#         },
        

#     ]
# }

# 支付相关配置
# 支付宝配置
ALIPAY_APP_ID = ALIPAY_CONFIG['appid']
ALIPAY_APP_PRIVATE_KEY = open(ALIPAY_CONFIG['app_private_key_path']).read()
ALIPAY_PUBLIC_KEY = open(ALIPAY_CONFIG['alipay_public_key_path']).read()

# 积分扣除规则配置
POINT_DEDUCTION_RULES = {
    # 普通用户的任务类型扣分规则
    'regular_user': {
        "product_replace": 15,  
        "text_to_image": 3,
        "white_background": 3,
        "fine_detail": 3,
        "wide_picture": 3,
        "internal_supplementation": 3,
        "internal_supplementation_and_removal": 3,
        "complete_redrawing": 3,
        "product_text_image": 3,
        "product_clue": 3,
        "clue_product": 3,
        "multi_image_to_image": 3,
    },
    # VIP用户的任务类型扣分规则（更优惠）
    'vip_user': {
        "product_replace": 0,  # VIP用户产品替换更便宜
        "text_to_image": 0,
        "white_background": 0,
        "fine_detail": 0,
        "wide_picture": 0,
        "internal_supplementation": 0,
        "internal_supplementation_and_removal": 0,
        "complete_redrawing": 0,
        "product_text_image": 0,
        "product_clue": 0,
        "clue_product": 0,
        "multi_image_to_image": 0,
    }
}

# 支付宝沙箱环境配置
ALIPAY_SANDBOX_GATEWAY = ALIPAY_CONFIG['gateway_url']
ALIPAY_SANDBOX_NOTIFY_URL = ALIPAY_CONFIG['app_notify_url']
ALIPAY_SANDBOX_RETURN_URL = ALIPAY_CONFIG['return_url']

# 支付宝生产环境配置
ALIPAY_PRODUCTION_GATEWAY = ALIPAY_CONFIG['gateway_url']
ALIPAY_PRODUCTION_NOTIFY_URL = ALIPAY_CONFIG['app_notify_url']
ALIPAY_PRODUCTION_RETURN_URL = ALIPAY_CONFIG['return_url']

# 根据DEBUG模式选择支付宝环境
ALIPAY_GATEWAY = ALIPAY_SANDBOX_GATEWAY if ALIPAY_CONFIG['debug'] else ALIPAY_PRODUCTION_GATEWAY
ALIPAY_NOTIFY_URL = ALIPAY_SANDBOX_NOTIFY_URL if ALIPAY_CONFIG['debug'] else ALIPAY_PRODUCTION_NOTIFY_URL
ALIPAY_RETURN_URL = ALIPAY_SANDBOX_RETURN_URL if ALIPAY_CONFIG['debug'] else ALIPAY_PRODUCTION_RETURN_URL

# 微信支付配置
WECHAT_APP_ID = 'your_app_id'
WECHAT_APP_SECRET = 'your_app_secret'
WECHAT_MCH_ID = 'your_mch_id'
WECHAT_API_KEY = 'your_api_key'
WECHAT_NOTIFY_URL = 'http://www.qihuaimage.com/api/payments/notification/wechat/' # 统一支付通知地址
WECHAT_REDIRECT_URI = 'your_redirect_uri'  # 授权回调地址

# 银行卡支付配置
BANK_NAME = 'your_bank_name'
BANK_ACCOUNT_NUMBER = 'your_bank_account_number'
BANK_ACCOUNT_NAME = 'your_bank_account_name'
BANK_NOTIFY_URL = 'http://your-domain/api/orders/payments/notification/bank/'

# 支付成功后的跳转页面
PAYMENT_SUCCESS_URL = 'http://your-domain/orders/payment/success/'
PAYMENT_FAIL_URL = 'http://your-domain/orders/payment/fail/'

# settings.py
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'  # 使用 Redis 作为 Broker
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/1'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_BEAT_SCHEDULE = {
    'retry-failed-requests': {
        'task': 'templateImage.retry_tasks.retry_failed_requests',
        'schedule': 200.0,  # 每 300 秒（5分钟）执行一次
    },
    # 新增的任务监控定时任务
    'monitor-stuck-tasks': {
        'task': 'templateImage.task_status_monitor.monitor_processing_tasks',
        'schedule': 300.0,  # 每5分钟检查一次
    },
    'full-task-status-sync': {
        'task': 'templateImage.task_status_monitor.full_task_status_sync',
        'schedule': 3600.0,  # 每小时执行一次
    },
}
CELERY_WORKER_SEND_TASK_EVENTS = True  # 启用事件监控
CELERY_TASK_SEND_SENT_EVENT = True      # 发送任务事件

# Volcengine Visual API配置
VOLCENGINE_VISUAL_CONFIG = {
    'ACCESS_KEY': 'AKGU',  # 替换为实际的Access Key
    'SECRET_KEY': 'TXpSa',  # 替换为实际的Secret Key
    'HOST': 'visual.volcengineapi.com',
    'REGION': 'cn-north-1',
    'ENDPOINT': 'https://visual.volcengineapi.com',
    'SERVICE': 'cv',
    'VERSION': '2022-08-31'
,
    'POINTS': 5
}
